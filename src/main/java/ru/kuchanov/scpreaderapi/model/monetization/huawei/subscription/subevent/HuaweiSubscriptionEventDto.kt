package ru.kuchanov.scpreaderapi.model.monetization.huawei.subscription.subevent

import com.fasterxml.jackson.annotation.JsonValue

/**
 * [documentation](https://developer.huawei.com/consumer/en/doc/development/HMSCore-References-V5/api-notifications-about-subscription-events-0000001050706084-V5#EN-US_TOPIC_0000001050706084__table15297548123520)
 */
data class HuaweiSubscriptionEventDto(
        val statusUpdateNotification: String,
        @Suppress("SpellCheckingInspection")
        val notifycationSignature: String
)

/**
 * [doc](https://developer.huawei.com/consumer/en/doc/development/HMSCore-References-V5/api-notifications-about-subscription-events-0000001050706084-V5#EN-US_TOPIC_0000001050706084__section241419524310)
 */
data class StatusUpdateNotification(
        /**
         * Environment for sending a notification. The options are as follows:

        PROD: official environment
        SandBox: sandbox testing environment
         */
        val environment: Environment,
        /**
         * Type of a notification event. For details, please refer to Table 2.
         */
        val notificationType: NotificationType,
        val subscriptionId: String,
        /**
         * Refund time. The value is a UTC timestamp, in milliseconds.
         * This parameter is passed only when notificationType is set to CANCEL.
         */
        val cancellationDate: Long?,
        /**
         * Order ID, which uniquely identifies a transaction and is generated by the Huawei IAP server during payment.
         * A different order ID is generated for each fee deduction.
         * The parameter does not exist when notificationType is set to NEW_RENEWAL_PREF.
         */
        val orderId: String?,
        /**
         * Token of the latest receipt, which is passed only when notificationType is set to
         * INITIAL_BUY(0), RENEWAL(2), or INTERACTIVE_RENEWAL(3) and the renewal is successful.
         */
        val latestReceipt: String?,
        /**
         * Latest receipt, which is a JSON string. This parameter is left empty when notificationType is set to
         * CANCEL(1). For details about the parameters contained, please refer to InappPurchaseDetails.
         */
        val latestReceiptInfo: String?,
        /**
         * Signature string for the latestReceiptInfo parameter. The signature algorithm is SHA256withRSA.
         *  After your server receives the signature string, you need to use the public payment key to
         * verify the signature of latestReceiptInfo in JSON format.
         * For details, please refer to Verifying the Signature in the Returned Result.
         * For details about how to obtain the public key, please refer to Querying IAP Information.
         */
        val latestReceiptInfoSignature: String?,
        /**
         * Token of the latest expired receipt.
         * This parameter has a value only when notificationType is set to RENEWAL(2) or INTERACTIVE_RENEWAL(3).
         */
        val latestExpiredReceipt: String?,
        /**
         * Latest expired receipt, which is a JSON string.
         * This parameter has a value only when notificationType is set to RENEWAL(2) or INTERACTIVE_RENEWAL(3).
         */
        val latestExpiredReceiptInfo: String?,
        /**
         * Signature string for the latestExpiredReceiptInfo parameter. The signature algorithm is SHA256withRSA.
         * After your server receives the signature string, you need to use the public payment key to
         * verify the signature of latestExpiredReceiptInfo in JSON format.
         * For details, please refer to Verifying the Signature in the Returned Result.
         * For details about how to obtain the public key, please refer to Querying IAP Information.
         */
        val latestExpiredReceiptInfoSignature: String?,
        /**
         * Renewal status. The options are as follows:
         * 1: The subscription will automatically renew at the end of the current subscription period.
         * 0: The user has canceled subscription renewal.
         */
        val autoRenewStatus: Int?,
        /**
         * Refund order ID. This parameter has a value only when notificationType is set to CANCEL(1).
         */
        val refundPayOrderId: String?,
        val productId: String,
        val applicationId: String?,
        /**
         * Expiration reason. This parameter has a value only when notificationType is set to
         * RENEWAL or INTERACTIVE_RENEWAL and the renewal fails.
         */
        val expirationIntent: String?
) {
    @Suppress("unused")
    enum class Environment {
        PROD, Sandbox, SandBox/*fixme when get correct version from DTSE*/
    }

    @Suppress("unused")
    enum class NotificationType constructor(@get:JsonValue val value: Int) {
        /**
         * Integer. First purchase behavior of a subscription.
         */
        INITIAL_BUY(0),

        /**
         * Integer. When customer service personnel or an app revokes a subscription,
         * the revoking time (when the refund starts) can be obtained using cancellationDate.
         */
        CANCEL(1),

        /**
         * Integer. When an expired subscription is automatically renewed,
         * the next renewal time can be obtained based on the expiration time in the receipt.
         */
        RENEWAL(2),

        /**
         * Integer. When a user renews an expired subscription or switches from an expired subscription to
         * another one, the service takes effect immediately after the operation is successful.
         */
        INTERACTIVE_RENEWAL(3),

        /**
         * Integer. A user selects another subscription in the group and it takes effect
         * after the current subscription expires. The current validity period is not affected.
         * That is, the subscription takes effect in the next validity period after downgrade or crossgrade.
         * The notification carries the last valid receipt and new subscription information,
         * including the product ID and subscription ID.
         */
        NEW_RENEWAL_PREF(4),

        /**
         * Integer. The renewal of a subscription is stopped by a user, you, or Huawei,
         * but the paid service of the subscription is still valid.
         * The notification contains the latest receipt, product ID, app ID, subscription ID, and subscription token.
         */
        RENEWAL_STOPPED(5),

        /**
         * Integer. A user proactively renews a subscription and the renewal status is normal. The notification contains the latest receipt, product ID, app ID, subscription ID, and subscription token.
         */
        RENEWAL_RESTORED(6),

        /** Integer. A single renewal is successful in a normal case, including but not limited to
         * the promotion period, free trial period, and sandbox testing.
         * The notification contains the latest receipt, product ID, app ID, subscription ID, and subscription token.
         * NOTE If INITIAL_BUY(0), RENEWAL(2), or INTERACTIVE_RENEWAL(3) exists,
         * RENEWAL_RECURRING(7) does not exist because all of them indicate a successful renewal.
         */
        RENEWAL_RECURRING(7),

        /**
         * Integer. An expired subscription enters the account retention period.
         */
        ON_HOLD(9),

        /**
         * Integer. After a user makes a renewal suspension plan, the subscription enters the paused state when its validity period ends.
         */
        PAUSED(10),

        /**
         * Integer. A user has made a renewal suspension plan.
         */
        PAUSE_PLAN_CHANGED(11),

        /**
         * Integer. A user has agreed with the price increase.
         */
        PRICE_CHANGE_CONFIRMED(12),

        /**
         * Integer. The subscription renewal time has been postponed.
         */
        DEFERRED(13)
    }
}